apiVersion: v1
kind: Service
metadata:
  labels:
    app: my-app
    environment: prod
    version: v1.0.0
  name: prod-my-app-service
  namespace: my-app-prod
spec:
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: 80
  selector:
    app: my-app
    environment: prod
    version: v1.0.0
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: my-app
    environment: prod
    version: v1.0.0
  name: prod-my-app
  namespace: my-app-prod
spec:
  replicas: 2
  selector:
    matchLabels:
      app: my-app
      environment: prod
      version: v1.0.0
  template:
    metadata:
      labels:
        app: my-app
        environment: prod
        version: v1.0.0
    spec:
      containers:
      - env:
        - name: ENVIRONMENT
          value: production
        - name: LOG_LEVEL
          value: info
        image: nginx:latest
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
        name: my-app
        ports:
        - containerPort: 80
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
        resources:
          limits:
            cpu: 1000m
            memory: 512Mi
          requests:
            cpu: 500m
            memory: 256Mi
---
apiVersion: batch/v1
kind: CronJob
metadata:
  labels:
    environment: prod
  name: prod-hello-world-cronjob
  namespace: my-app-prod
spec:
  failedJobsHistoryLimit: 1
  jobTemplate:
    metadata:
      labels:
        environment: prod
    spec:
      backoffLimit: 0
      template:
        metadata:
          labels:
            environment: prod
        spec:
          containers:
          - command:
            - /bin/sh
            - -c
            - |
              echo "hello world"
              sleep 1800  # 30 minutes = 1800 seconds
              echo "shutting down"
            image: busybox:1.35
            name: hello-world
          restartPolicy: Never
  schedule: 0 */12 * * *
  successfulJobsHistoryLimit: 3
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  labels:
    app: my-app
    environment: prod
    version: v1.0.0
  name: prod-my-app-hpa
  namespace: my-app-prod
spec:
  behavior:
    scaleDown:
      policies:
      - periodSeconds: 60
        type: Percent
        value: 5
      - periodSeconds: 60
        type: Pods
        value: 1
      selectPolicy: Min
      stabilizationWindowSeconds: 600
    scaleUp:
      policies:
      - periodSeconds: 60
        type: Percent
        value: 25
      - periodSeconds: 60
        type: Pods
        value: 3
      selectPolicy: Max
      stabilizationWindowSeconds: 120
  maxReplicas: 50
  metrics:
  - resource:
      name: cpu
      target:
        averageUtilization: 50
        type: Utilization
    type: Resource
  - resource:
      name: memory
      target:
        averageUtilization: 60
        type: Utilization
    type: Resource
  - pods:
      metric:
        name: http_requests_per_second
      target:
        averageValue: "100"
        type: AverageValue
    type: Pods
  minReplicas: 3
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: prod-my-app
---
apiVersion: keda.sh/v1alpha1
kind: ScaledObject
metadata:
  labels:
    app: my-app
    environment: prod
    version: v1.0.0
  name: prod-my-app-keda
  namespace: my-app-prod
spec:
  cooldownPeriod: 600
  fallback:
    failureThreshold: 5
    replicas: 3
  idleReplicaCount: 2
  maxReplicaCount: 100
  minReplicaCount: 3
  pollingInterval: 10
  scaleTargetRef:
    name: my-app
  triggers:
  - metadata:
      type: Utilization
      value: "50"
    type: cpu
  - metadata:
      type: Utilization
      value: "60"
    type: memory
  - metadata:
      metricName: http_requests_per_second
      query: sum(rate(http_requests_total{job="my-app",environment="production"}[1m]))
      serverAddress: http://prometheus-prod.monitoring.svc.cluster.local:9090
      threshold: "50"
    type: prometheus
  - metadata:
      podSelector: app=my-app
      value: "10"
    type: kubernetes-workload
  - metadata:
      bootstrapServers: kafka-prod.example.com:9092
      consumerGroup: my-app-consumer
      lagThreshold: "100"
      topic: my-app-events
    type: kafka
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/rewrite-target: /
  labels:
    app: my-app
    environment: prod
    version: v1.0.0
  name: prod-my-app-ingress
  namespace: my-app-prod
spec:
  rules:
  - host: my-app.example.com
    http:
      paths:
      - backend:
          service:
            name: prod-my-app-service
            port:
              number: 80
        path: /
        pathType: Prefix
  tls:
  - hosts:
    - my-app.example.com
    secretName: my-app-prod-tls
